{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"runtime_generics","text":"<p>Highly into type-safe Python code?</p> <p>runtime_generics is a niche Python library that allows you to reuse type arguments explicitly passed at runtime to generic classes before instantiation.</p> <p>The library does four things:</p> <ul> <li>exposes utilities that allow to inspect C3-linearized MROs of runtime generics   and type-check them with variance support: <code>get_mro()</code>, <code>type_check()</code>;</li> <li>makes it possible to retrieve the type arguments passed to the generic class at runtime   before the class was instantiated: <code>get_type_arguments()</code>, <code>get_alias()</code>;</li> <li>offers facilities to find how parent classes are parametrized (   e.g. if <code>Foo[T]</code> inherits from <code>Dict[str, T]</code>,   finds that <code>Dict[str, int]</code> is a parent for <code>Foo[int]</code>   ): <code>get_parents()</code>;</li> <li>given a parametrized generic class (generic alias),   makes every class method use generic alias <code>cls</code> instead of the origin class   (unless decorated with <code>@no_alias</code>).</li> </ul>"},{"location":"#a-simple-example","title":"A Simple Example","text":"<p>3.12+ (PEP 695 syntax):</p> <pre><code>from __future__ import annotations\n\nimport io\nfrom typing import TYPE_CHECKING\n\nfrom runtime_generics import get_alias, get_type_arguments, runtime_generic, type_check\n\nif TYPE_CHECKING:\n    from typing import IO, Literal, overload\n\n\n@runtime_generic\nclass IOWrapper[T: str | bytes]:\n    data_type: type[T]\n\n    def __init__(self, stream: IO[T]) -&gt; None:\n        (self.data_type,) = get_type_arguments(self)\n        self.stream = stream\n\n    if TYPE_CHECKING:\n        @overload\n        def is_binary(self: IOWrapper[bytes]) -&gt; Literal[True]: ...\n\n        @overload\n        def is_binary(self: IOWrapper[str]) -&gt; Literal[False]: ...\n\n    def is_binary(self) -&gt; bool:\n        # alternatively here: `self.data_type == bytes`\n        return type_check(self, IOWrapper[bytes])\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{get_alias(self)} object at ...&gt;\"\n\n\nmy_binary_data = IOWrapper[bytes](io.BytesIO(b\"foo\"))\nassert my_binary_data.data_type is bytes\nassert my_binary_data.is_binary()\nassert repr(IOWrapper[str](io.StringIO())) == \"&lt;__main__.IOWrapper[str] object at ...&gt;\"\n</code></pre> <p>3.8+:</p> <pre><code>from __future__ import annotations\n\nimport io\nfrom typing import TYPE_CHECKING, Generic, TypeVar\n\nfrom runtime_generics import get_alias, get_type_arguments, runtime_generic, type_check\n\nif TYPE_CHECKING:\n    from typing import IO, Literal, overload\n\nT = TypeVar(\"T\", str, bytes)\n\n\n@runtime_generic\nclass IOWrapper(Generic[T]):\n    data_type: type[T]\n\n    def __init__(self, stream: IO[T]) -&gt; None:\n        (self.data_type,) = get_type_arguments(self)\n        self.stream = stream\n\n    if TYPE_CHECKING:\n        @overload\n        def is_binary(self: IOWrapper[bytes]) -&gt; Literal[True]: ...\n\n        @overload\n        def is_binary(self: IOWrapper[str]) -&gt; Literal[False]: ...\n\n    def is_binary(self) -&gt; bool:\n        # alternatively here: `self.data_type == bytes`\n        return type_check(self, IOWrapper[bytes])\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{get_alias(self)} object at ...&gt;\"\n\n\nmy_binary_data = IOWrapper[bytes](io.BytesIO(b\"foo\"))\nassert my_binary_data.data_type is bytes\nassert my_binary_data.is_binary()\nassert repr(IOWrapper[str](io.StringIO())) == \"&lt;__main__.IOWrapper[str] object at ...&gt;\"\n</code></pre>"},{"location":"#for-enterprise","title":"For Enterprise","text":"Available as part of the Tidelift Subscription.This project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use. Learn more here. <p>To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.</p>"},{"location":"#installation","title":"Installation","text":"<p>You might simply install it with pip:</p> <pre><code>pip install runtime-generics\n</code></pre> <p>If you use Poetry, then you might want to run:</p> <pre><code>poetry add runtime-generics\n</code></pre>"},{"location":"#for-contributors","title":"For Contributors","text":"<p>Note</p> <p>If you use Windows, it is highly recommended to complete the installation in the way presented below through WSL2.</p> <ol> <li> <p>Fork the runtime_generics repository on GitHub.</p> </li> <li> <p>Install Poetry.     Poetry is an amazing tool for managing dependencies &amp; virtual environments, building packages and publishing them.     You might use pipx to install it globally (recommended):</p> <pre><code>pipx install poetry\n</code></pre> <p><sub>If you encounter any problems, refer to the official documentation for the most up-to-date installation instructions.</sub></p> <p>Be sure to have Python 3.8 installed\u2014if you use pyenv, simply run:</p> <pre><code>pyenv install 3.8\n</code></pre> </li> <li> <p>Clone your fork locally and install dependencies.</p> <pre><code>git clone https://github.com/your-username/runtime_generics path/to/runtime_generics\ncd path/to/runtime_generics\npoetry env use $(cat .python-version)\npoetry install\n</code></pre> <p>Next up, simply activate the virtual environment and install pre-commit hooks:</p> <pre><code>poetry shell\npre-commit install\n</code></pre> </li> </ol> <p>For more information on how to contribute, check out CONTRIBUTING.md. Always happy to accept contributions! \u2764\ufe0f</p>"},{"location":"#legal-info","title":"Legal Info","text":"<p>\u00a9 Copyright by Bartosz S\u0142awecki (@bswck). This software is licensed under the terms of MIT License.</p>"},{"location":"api/","title":"API Reference","text":"<p>Reuse generic class type arguments at runtime.</p> <p>This library provides a decorator that allows you to mark a class as a 'runtime generic': after instantiation, the class will have a <code>__args__</code> attribute that contains the type arguments of the instance.</p> <p>Examples:</p> <pre><code>from __future__ import annotations\n\nimport io\nfrom typing import TYPE_CHECKING, Generic, TypeVar\n\nfrom runtime_generics import get_alias, get_type_arguments, runtime_generic, type_check\n\nif TYPE_CHECKING:\n    from typing import IO, Literal, overload\n\nT = TypeVar(\"T\", str, bytes)\n\n\n@runtime_generic\nclass IOWrapper(Generic[T]):\n    data_type: type[T]\n\n    def __init__(self, stream: IO[T]) -&gt; None:\n        (self.data_type,) = get_type_arguments(self)\n        self.stream = stream\n\n    if TYPE_CHECKING:\n        @overload\n        def is_binary(self: IOWrapper[bytes]) -&gt; Literal[True]: ...\n\n        @overload\n        def is_binary(self: IOWrapper[str]) -&gt; Literal[False]: ...\n\n    def is_binary(self) -&gt; bool:\n        # alternatively here: `self.data_type == bytes`\n        return type_check(self, IOWrapper[bytes])\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{get_alias(self)} object at ...&gt;\"\n\n\nmy_binary_data = IOWrapper[bytes](io.BytesIO(b\"foo\"))\nassert my_binary_data.data_type is bytes\nassert my_binary_data.is_binary()\nassert repr(IOWrapper[str](io.StringIO())) == \"&lt;__main__.IOWrapper[str] object at ...&gt;\"\n</code></pre> <p>Classes:</p> <ul> <li> <code>GenericArgs</code>         \u2013          <p>Marker class for type arguments of runtime generics.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_parametrization</code>           \u2013            <p>Map type parameters to type arguments in a generic alias.</p> </li> <li> <code>get_parents</code>           \u2013            <p>Get all parametrized parents of a runtime generic class or instance.</p> </li> <li> <code>get_mro</code>           \u2013            <p>Get all parametrized parents of a runtime generic using the C3 algorithm.</p> </li> <li> <code>get_alias</code>           \u2013            <p>For any runtime generic (class, instance), find the most relevant generic alias.</p> </li> <li> <code>runtime_generic_patch</code>           \u2013            <p>Patch <code>objects</code> to support runtime generics.</p> </li> <li> <code>no_alias</code>           \u2013            <p>Mark a classmethod as not being passed a generic alias in place of cls.</p> </li> <li> <code>get_type_arguments</code>           \u2013            <p>Get all type arguments of a runtime generic.</p> </li> <li> <code>runtime_generic_proxy</code>           \u2013            <p>Create a runtime generic descriptor with a result type.</p> </li> <li> <code>runtime_generic_init</code>           \u2013            <p>Initialize a runtime generic instance.</p> </li> <li> <code>runtime_generic</code>           \u2013            <p>Mark a class as a runtime generic.</p> </li> <li> <code>type_check</code>           \u2013            <p>Examine whether a runtime generic is a valid subtype of another runtime generic.</p> </li> </ul>"},{"location":"api/#runtime_generics.GenericArgs","title":"<code>GenericArgs</code>","text":"<p>             Bases: <code>tuple</code></p> <p>Marker class for type arguments of runtime generics.</p>"},{"location":"api/#runtime_generics.get_parametrization","title":"<code>get_parametrization(runtime_generic)</code>","text":"<p>Map type parameters to type arguments in a generic alias.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def get_parametrization(runtime_generic: Any) -&gt; dict[Any, Any]:\n    \"\"\"Map type parameters to type arguments in a generic alias.\"\"\"\n    return _get_parametrization(\n        _get_generic_signature(runtime_generic).__args__,\n        get_type_arguments(runtime_generic),\n    )\n</code></pre>"},{"location":"api/#runtime_generics.get_parents","title":"<code>get_parents(cls)</code>","text":"<p>Get all parametrized parents of a runtime generic class or instance.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def get_parents(cls: Any) -&gt; tuple[Any, ...]:\n    \"\"\"Get all parametrized parents of a runtime generic class or instance.\"\"\"\n    return tuple(_get_parents(cls))\n</code></pre>"},{"location":"api/#runtime_generics.get_mro","title":"<code>get_mro(cls)</code>","text":"<p>Get all parametrized parents of a runtime generic using the C3 algorithm.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def get_mro(cls: Any) -&gt; tuple[Any, ...]:\n    \"\"\"Get all parametrized parents of a runtime generic using the C3 algorithm.\"\"\"\n    return tuple(_get_mro(cls))\n</code></pre>"},{"location":"api/#runtime_generics.get_alias","title":"<code>get_alias(rg)</code>","text":"<p>For any runtime generic (class, instance), find the most relevant generic alias.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from typing import Generic, TypeVar\n&gt;&gt;&gt; T = TypeVar(\"T\")\n...\n&gt;&gt;&gt; @runtime_generic\n... class Foo(Generic[T]):\n...     pass\n...\n&gt;&gt;&gt; get_alias(Foo)\nruntime_generics.Foo[typing.Any]\n&gt;&gt;&gt; get_alias(Foo())\nruntime_generics.Foo[typing.Any]\n&gt;&gt;&gt; get_alias(Foo[int])\nruntime_generics.Foo[int]\n&gt;&gt;&gt; get_alias(Foo[int]())\nruntime_generics.Foo[int]\n</code></pre> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def get_alias(rg: Any) -&gt; Any:\n    \"\"\"\n    For any runtime generic (class, instance), find the most relevant generic alias.\n\n    Parameters\n    ----------\n    rg\n        Any form of a runtime generic.\n\n    Examples\n    --------\n    ```py\n    &gt;&gt;&gt; from typing import Generic, TypeVar\n    &gt;&gt;&gt; T = TypeVar(\"T\")\n    ...\n    &gt;&gt;&gt; @runtime_generic\n    ... class Foo(Generic[T]):\n    ...     pass\n    ...\n    &gt;&gt;&gt; get_alias(Foo)\n    runtime_generics.Foo[typing.Any]\n    &gt;&gt;&gt; get_alias(Foo())\n    runtime_generics.Foo[typing.Any]\n    &gt;&gt;&gt; get_alias(Foo[int])\n    runtime_generics.Foo[int]\n    &gt;&gt;&gt; get_alias(Foo[int]())\n    runtime_generics.Foo[int]\n\n    ```\n\n    \"\"\"\n    try:\n        args = rg.__args__\n    except AttributeError:\n        return _get_default_alias(rg)\n    else:\n        if any(\n            _has_origin(arg) and arg.__origin__ is Unpack or isinstance(arg, TypeVar)\n            for arg in args\n        ):\n            return _get_default_alias(rg)\n    if rg.__module__ == \"typing\" and rg._name:  # noqa: SLF001\n        return _AliasProxy(getattr(typing, rg._name), rg.__args__)  # noqa: SLF001\n    return _AliasProxy(rg.__origin__, rg.__args__)\n</code></pre>"},{"location":"api/#runtime_generics.get_alias(rg)","title":"<code>rg</code>","text":"(<code>Any</code>)         \u2013          <p>Any form of a runtime generic.</p>"},{"location":"api/#runtime_generics.runtime_generic_patch","title":"<code>runtime_generic_patch(*objects, stack_offset=2)</code>","text":"<p>Patch <code>objects</code> to support runtime generics.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>@contextmanager\ndef runtime_generic_patch(*objects: object, stack_offset: int = 2) -&gt; Iterator[None]:\n    \"\"\"Patch `objects` to support runtime generics.\"\"\"\n    variables = {}\n\n    with suppress(ValueError, TypeError, RuntimeError):\n        variables = map_args_to_identifiers(\n            *objects,\n            stack_offset=stack_offset + 1,\n            function=runtime_generic_patch,\n        )\n\n    if objects and not variables:\n        msg = (\n            \"Failed to resolve objects to patch.\\n\"\n            \"This might have occured on incorrect call to `runtime_generic_patch()`.\\n\"\n            \"Call `runtime_generic_patch()` only with explicit identifiers, \"\n            \"like `runtime_generic_patch(List, Tuple)`.\"\n        )\n        raise ValueError(msg)\n\n    backframe_globals = inspect.stack()[stack_offset].frame.f_globals\n    previous_state = backframe_globals.copy()\n\n    # fmt: off\n    backframe_globals.update({\n        identifier: runtime_generic_proxy(obj)\n        for identifier, obj in variables.items()\n    })\n    # fmt: on\n\n    try:\n        yield\n    finally:\n        backframe_globals.update(previous_state)\n</code></pre>"},{"location":"api/#runtime_generics.no_alias","title":"<code>no_alias(cls_method)</code>","text":"<p>Mark a classmethod as not being passed a generic alias in place of cls.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def no_alias(cls_method: Callable[_P, _R]) -&gt; Callable[_P, _R]:\n    \"\"\"Mark a classmethod as not being passed a generic alias in place of cls.\"\"\"\n    cls_method.__no_alias__ = True  # type: ignore[attr-defined]\n    return cls_method\n</code></pre>"},{"location":"api/#runtime_generics.get_type_arguments","title":"<code>get_type_arguments(rg)</code>","text":"<p>Get all type arguments of a runtime generic.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>args</code>         \u2013          <p>The type arguments of the examined runtime generic.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from typing import Generic, TypeVar\n&gt;&gt;&gt; T = TypeVar(\"T\")\n...\n&gt;&gt;&gt; @runtime_generic\n... class Foo(Generic[T]):\n...     pass\n&gt;&gt;&gt; args: tuple[type[int]] = get_type_arguments(Foo[int]())\n&gt;&gt;&gt; args\n(&lt;class 'int'&gt;,)\n</code></pre> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def get_type_arguments(rg: object) -&gt; tuple[type[Any], ...]:\n    \"\"\"\n    Get all type arguments of a runtime generic.\n\n    Parameters\n    ----------\n    rg\n        An class that was decorated with `@runtime_generic` or its instance.\n\n    Returns\n    -------\n    args\n        The type arguments of the examined runtime generic.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from typing import Generic, TypeVar\n    &gt;&gt;&gt; T = TypeVar(\"T\")\n    ...\n    &gt;&gt;&gt; @runtime_generic\n    ... class Foo(Generic[T]):\n    ...     pass\n    &gt;&gt;&gt; args: tuple[type[int]] = get_type_arguments(Foo[int]())\n    &gt;&gt;&gt; args\n    (&lt;class 'int'&gt;,)\n\n    ```\n\n    \"\"\"\n    args = getattr(rg, \"__args__\", ())\n    return tuple(args) if isinstance(args, GenericArgs) else _typing_get_args(args)\n</code></pre>"},{"location":"api/#runtime_generics.get_type_arguments(rg)","title":"<code>rg</code>","text":"(<code>object</code>)         \u2013          <p>An class that was decorated with <code>@runtime_generic</code> or its instance.</p>"},{"location":"api/#runtime_generics.runtime_generic_proxy","title":"<code>runtime_generic_proxy(result_type)</code>","text":"<p>Create a runtime generic descriptor with a result type.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def runtime_generic_proxy(result_type: Any) -&gt; Any:\n    \"\"\"Create a runtime generic descriptor with a result type.\"\"\"\n    parameters = _get_generic_signature(result_type).__args__\n\n    @partial(runtime_generic, result_type=result_type)\n    class _Proxy(Generic[parameters]):  # type: ignore[misc]\n        pass\n\n    return cast(Any, _Proxy)\n</code></pre>"},{"location":"api/#runtime_generics.runtime_generic_init","title":"<code>runtime_generic_init(self, args, origin)</code>","text":"<p>Initialize a runtime generic instance.</p> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def runtime_generic_init(\n    self: object,\n    args: tuple[object, ...],\n    origin: object,\n) -&gt; None:\n    \"\"\"Initialize a runtime generic instance.\"\"\"\n    vars(self).setdefault(\"__args__\", args)\n    vars(self).setdefault(\"__origin__\", origin)\n</code></pre>"},{"location":"api/#runtime_generics.runtime_generic","title":"<code>runtime_generic(cls, result_type=None)</code>","text":"<p>Mark a class as a runtime generic.</p> <p>This is a class decorator that dynamically adds a <code>__class_getitem__</code> descriptor to the class. This method returns a callable that takes type arguments and returns a new instance of the class with the <code>__args__</code> attribute set to the type arguments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from typing import Generic, TypeVar\n&gt;&gt;&gt; T = TypeVar(\"T\")\n...\n&gt;&gt;&gt; @runtime_generic\n... class Foo(Generic[T]):\n...     pass\n...\n&gt;&gt;&gt; Foo[int]().__args__\n(&lt;class 'int'&gt;,)\n</code></pre> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def runtime_generic(\n    cls: _R,\n    result_type: Any = None,\n) -&gt; _R:\n    \"\"\"\n    Mark a class as a runtime generic.\n\n    This is a class decorator that dynamically adds a `__class_getitem__` descriptor\n    to the class. This method returns a callable that takes type arguments and returns\n    a new instance of the class with the `__args__` attribute set to the type arguments.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from typing import Generic, TypeVar\n    &gt;&gt;&gt; T = TypeVar(\"T\")\n    ...\n    &gt;&gt;&gt; @runtime_generic\n    ... class Foo(Generic[T]):\n    ...     pass\n    ...\n    &gt;&gt;&gt; Foo[int]().__args__\n    (&lt;class 'int'&gt;,)\n\n    ```\n\n    \"\"\"\n    _setup_runtime_generic(cls, result_type=result_type)\n    return cls\n</code></pre>"},{"location":"api/#runtime_generics.type_check","title":"<code>type_check(subtype, cls)</code>","text":"<p>Examine whether a runtime generic is a valid subtype of another runtime generic.</p> <p>Variance is supported. TypeVar bounds are not yet supported.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from typing import Any, Dict, Generic, TypeVar\n...\n&gt;&gt;&gt; T = TypeVar(\"T\")\n&gt;&gt;&gt; T_co = TypeVar(\"T_co\", covariant=True)\n&gt;&gt;&gt; T_contra = TypeVar(\"T_contra\", contravariant=True)\n...\n&gt;&gt;&gt; type_check(Dict[str, int], Dict[str, bool])  # KT, VT - invariant\nFalse\n&gt;&gt;&gt; @runtime_generic\n... class Foo(Generic[T, T_co, T_contra]):\n...     pass\n...\n&gt;&gt;&gt; @runtime_generic\n... class Bar(Generic[T_contra, T_co, T], Foo[T, T_co, T_contra]):\n...     pass\n...\n&gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, int, int])\nTrue\n&gt;&gt;&gt; type_check(Foo[int, bool, int], Foo[int, int, int])\nTrue\n&gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, int, bool])\nTrue\n&gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, bool, int])\nFalse\n&gt;&gt;&gt; type_check(Foo[int, int, bool], Foo[int, int, int])\nFalse\n&gt;&gt;&gt; type_check(Bar[int, int, int], Foo[int, int, bool])\nTrue\n&gt;&gt;&gt; type_check(Bar[bool, int, int], Foo[int, int, int])\nFalse\n&gt;&gt;&gt; type_check(Bar[int, bool, int], Foo[int, int, int])\nTrue\n</code></pre> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether <code>subtype</code> is a valid subtype of <code>cls</code>.</p> </li> </ul> Source code in <code>runtime_generics/__init__.py</code> <pre><code>def type_check(subtype: Any, cls: Any) -&gt; bool:\n    \"\"\"\n    Examine whether a runtime generic is a valid subtype of another runtime generic.\n\n    Variance is supported. TypeVar bounds are not yet supported.\n\n    Parameters\n    ----------\n    subtype\n        The runtime generic to examine.\n    cls\n        The supertype runtime generic.\n\n    Examples\n    --------\n    ```python\n    &gt;&gt;&gt; from typing import Any, Dict, Generic, TypeVar\n    ...\n    &gt;&gt;&gt; T = TypeVar(\"T\")\n    &gt;&gt;&gt; T_co = TypeVar(\"T_co\", covariant=True)\n    &gt;&gt;&gt; T_contra = TypeVar(\"T_contra\", contravariant=True)\n    ...\n    &gt;&gt;&gt; type_check(Dict[str, int], Dict[str, bool])  # KT, VT - invariant\n    False\n    &gt;&gt;&gt; @runtime_generic\n    ... class Foo(Generic[T, T_co, T_contra]):\n    ...     pass\n    ...\n    &gt;&gt;&gt; @runtime_generic\n    ... class Bar(Generic[T_contra, T_co, T], Foo[T, T_co, T_contra]):\n    ...     pass\n    ...\n    &gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, int, int])\n    True\n    &gt;&gt;&gt; type_check(Foo[int, bool, int], Foo[int, int, int])\n    True\n    &gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, int, bool])\n    True\n    &gt;&gt;&gt; type_check(Foo[int, int, int], Foo[int, bool, int])\n    False\n    &gt;&gt;&gt; type_check(Foo[int, int, bool], Foo[int, int, int])\n    False\n    &gt;&gt;&gt; type_check(Bar[int, int, int], Foo[int, int, bool])\n    True\n    &gt;&gt;&gt; type_check(Bar[bool, int, int], Foo[int, int, int])\n    False\n    &gt;&gt;&gt; type_check(Bar[int, bool, int], Foo[int, int, int])\n    True\n\n    ```\n\n    Returns\n    -------\n    bool\n        Whether `subtype` is a valid subtype of `cls`.\n\n    \"\"\"\n    subtype = get_alias(subtype)\n    cls = get_alias(cls)\n\n    for mro_entry in get_mro(subtype):\n        if mro_entry.__origin__ is cls.__origin__:\n            mro_entry_parametrization = get_parametrization(mro_entry)\n            cls_parametrization = get_parametrization(cls)\n            sig = _get_generic_signature(cls)\n\n            for orig_param in sig.__args__:\n                param = orig_param\n                if _has_origin(param) and param.__origin__ is Unpack:\n                    (param,) = param.__args__\n\n                mro_entry_args = mro_entry_parametrization[param]\n                if not isinstance(mro_entry_args, tuple):\n                    mro_entry_args = (mro_entry_args,)\n\n                cls_args = cls_parametrization[param]\n                if not isinstance(cls_args, tuple):\n                    cls_args = (cls_args,)\n\n                if not all(\n                    map(\n                        partial(_inner_type_check, param=param),\n                        mro_entry_args,\n                        cls_args,\n                    ),\n                ):\n                    break\n            else:\n                return True\n    return False\n</code></pre>"},{"location":"api/#runtime_generics.type_check(subtype)","title":"<code>subtype</code>","text":"(<code>Any</code>)         \u2013          <p>The runtime generic to examine.</p>"},{"location":"api/#runtime_generics.type_check(cls)","title":"<code>cls</code>","text":"(<code>Any</code>)         \u2013          <p>The supertype runtime generic.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog. This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v331-2024-05-11","title":"v3.3.1 (2024-05-11)","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Type safety of <code>_get_parents</code>.</li> </ul>"},{"location":"changelog/#v330-2024-05-11","title":"v3.3.0 (2024-05-11)","text":"<p>No significant changes.</p>"},{"location":"changelog/#v320-2024-04-14","title":"v3.2.0 (2024-04-14)","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Relaxed support Python version range to &gt;=3.8.</li> </ul>"},{"location":"changelog/#v310-2024-03-16","title":"v3.1.0 (2024-03-16)","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Exposed <code>get_alias()</code> to retrieve the alias form used in runtime generic instance construction.</li> <li>Implemented <code>get_mro()</code> function for resolving MROs of runtime generics.</li> <li>Implemented <code>type_check()</code> for checking whether a runtime generic is a valid subtype of another runtime generic.</li> </ul>"},{"location":"changelog/#v305-2024-02-24","title":"v3.0.5 (2024-02-24)","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Wide support for resolving parametrized parents of runtime generic classes as well as instances of them.</li> </ul>"},{"location":"changelog/#v304-2024-02-22","title":"v3.0.4 (2024-02-22)","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Updated documentation that contained obsolete information.</li> </ul>"},{"location":"changelog/#v303-2024-02-22","title":"v3.0.3 (2024-02-22)","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Constructing parametrized generics now also sets <code>__origin__</code> on the instance (so far, only <code>__args__</code> was set).</li> </ul>"},{"location":"changelog/#v302-2024-02-22","title":"v3.0.2 (2024-02-22)","text":"<p>No significant changes.</p>"},{"location":"changelog/#v301-2024-02-20","title":"v3.0.1 (2024-02-20)","text":"<p>No significant changes.</p>"},{"location":"changelog/#v300-2024-02-20","title":"v3.0.0 (2024-02-20)","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>generic_issubclass()</code> and <code>generic_isinstance()</code>.</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>get_parents()</code> for resolving parametrized parents, <code>runtime_generic_proxy()</code> and <code>runtime_generic_patch()</code> for subclassing e.g. <code>typing.List</code> as a runtime generic.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at bartoszpiotrslawecki@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-runtime_generics","title":"Contributing to runtime_generics \ud83c\udf89","text":"<p>Contributions are very welcome. \ud83d\ude80</p> <p>There are many ways to contribute, ranging from writing tutorials and improving the documentation, to submitting bug reports and feature requests or writing code which can be incorporated into runtime_generics.</p>"},{"location":"contributing/#report-bugs-and-request-features","title":"Report bugs and request features \ud83d\udc1b","text":"<p>Report these in the issue tracker. Relevant forms provide guidance on how to write a good bug report or feature request.</p>"},{"location":"contributing/#implement-new-features","title":"Implement new features \u2b50","text":"<p>Look here. Anything tagged with \"enhancement\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write documentation \ud83d\udcd6","text":"<p>The project could always use more documentation, whether as part of the official project docs. If you're interested in helping out, check the docs/ folder in the repository.</p>"},{"location":"contributing/#share-your-feedback","title":"Share your feedback \ud83c\udf0d","text":"<p>The best way to send feedback is to file an issue in the issue tracker.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are     welcome! \u2728</li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request guidelines \ud83d\udcdd","text":"<ol> <li> <p>Initially mark the PR as a draft, so that the maintainers know that you are making final touches.</p> </li> <li> <p>Ensure that the test coverage is not decreased. If you add a new feature, please add tests for it. Read more about coverage.</p> </li> <li> <p>Ensure that all GitHub checks pass. If they are disabled in your PR, ping the maintainers to request enabling them.</p> </li> <li> <p>Don't forget to link the relevant issue(s) in the PR description and describe the changes you made.</p> </li> </ol>"},{"location":"contributing/#get-started","title":"Get started! \ud83d\udd79\ufe0f","text":"<p>Ready to contribute? Here's a quick guide on how to set up runtime_generics and make a change.</p> <p>Note</p> <p>If you use Windows, it is highly recommended to complete the installation in the way presented below through WSL2.</p> <ol> <li> <p>Fork the runtime_generics repository on GitHub.</p> </li> <li> <p>Install Poetry.     Poetry is an amazing tool for managing dependencies &amp; virtual environments, building packages and publishing them.     You might use pipx to install it globally (recommended):</p> <pre><code>pipx install poetry\n</code></pre> <p><sub>If you encounter any problems, refer to the official documentation for the most up-to-date installation instructions.</sub></p> <p>Be sure to have Python 3.8 installed\u2014if you use pyenv, simply run:</p> <pre><code>pyenv install 3.8\n</code></pre> </li> <li> <p>Clone your fork locally and install dependencies.</p> <pre><code>git clone https://github.com/your-username/runtime_generics path/to/runtime_generics\ncd path/to/runtime_generics\npoetry env use $(cat .python-version)\npoetry install\n</code></pre> <p>Next up, simply activate the virtual environment and install pre-commit hooks:</p> <pre><code>poetry shell\npre-commit install\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass all tests:</p> <pre><code>poe check\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add -A\ngit commit -m \"Short description of changes (50 chars max)\" -m \"Optional extended description\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"}]}